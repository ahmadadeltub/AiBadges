import tkinter as tk
from threading import Thread
import speech_recognition as sr
from PIL import Image, ImageTk

# Desired dimensions and settings
LOGO_WIDTH, LOGO_HEIGHT = 200, 75
MIC_WIDTH, MIC_HEIGHT = 100, 100  # Microphone icon size
MAX_LINES = 100  # Maximum lines before auto-clear

# Initialize root window
root = tk.Tk()
root.title("Speaker Window")
root.geometry("800x500")
root.configure(bg="#98AFC7")  # Background color

# Load and resize microphone image
mic_logo_image = None
try:
    mic_img = Image.open("mic.png")
    mic_img = mic_img.resize((MIC_WIDTH, MIC_HEIGHT), Image.LANCZOS)
    mic_logo_image = ImageTk.PhotoImage(mic_img)
    print("Mic image loaded successfully.")
except Exception as e:
    print("Error loading mic image:", e)

# Function to load and resize left/right logos
def load_logos():
    try:
        left_img = Image.open("left.png")
        right_img = Image.open("right.png")
        left_img = left_img.resize((LOGO_WIDTH, LOGO_HEIGHT), Image.LANCZOS)
        right_img = right_img.resize((LOGO_WIDTH, LOGO_HEIGHT), Image.LANCZOS)
        return ImageTk.PhotoImage(left_img), ImageTk.PhotoImage(right_img)
    except Exception as e:
        print("Error loading images:", e)
        return None, None

left_logo_image, right_logo_image = load_logos()

# Top frame for Speaker Window logos and title
top_frame = tk.Frame(root, bg="#98AFC7")
top_frame.pack(fill='x', pady=10)

# Left logo
if left_logo_image:
    left_logo_label = tk.Label(top_frame, image=left_logo_image, bg="#98AFC7")
    left_logo_label.image = left_logo_image
    left_logo_label.pack(side="left", padx=10)
else:
    left_logo_label = tk.Label(top_frame, text="Left Logo", font=("Helvetica", 18, "bold"), fg="white", bg="#98AFC7")
    left_logo_label.pack(side="left", padx=10)

# Center title
title_label = tk.Label(top_frame, text="Ai Smart Badge", font=("Helvetica", 18, "bold"), fg="white", bg="#98AFC7")
title_label.pack(side="left", expand=True)

# Right logo
if right_logo_image:
    right_logo_label = tk.Label(top_frame, image=right_logo_image, bg="#98AFC7")
    right_logo_label.image = right_logo_image
    right_logo_label.pack(side="right", padx=10)
else:
    right_logo_label = tk.Label(top_frame, text="Right Logo", font=("Helvetica", 18, "bold"), fg="white", bg="#98AFC7")
    right_logo_label.pack(side="right", padx=10)

# Frame for microphone icon and listening label
listening_frame = tk.Frame(root, bg="#98AFC7")
listening_frame.pack(pady=20)

if mic_logo_image:
    mic_label = tk.Label(listening_frame, image=mic_logo_image, bg="#98AFC7")
    mic_label.image = mic_logo_image
    mic_label.pack(side="left", padx=5)
else:
    mic_label = tk.Label(listening_frame, text="(mic)", font=("Helvetica", 24, "bold"), fg="black", bg="#98AFC7")
    mic_label.pack(side="left", padx=5)

listening_label = tk.Label(listening_frame, text="Listening...", font=("Helvetica", 24, "bold"), fg="white", bg="#32CD32")
listening_label.pack(side="left", padx=5)

# Language selection frame
lang_frame = tk.LabelFrame(root, text="Select Language", padx=10, pady=10, 
                           font=("Helvetica", 18, "bold"), fg="white", bg="#98AFC7", relief=tk.RIDGE, bd=3)
lang_frame.pack(pady=10)

selected_language = tk.StringVar(value='en-US')

eng_radio = tk.Radiobutton(lang_frame, text="English", variable=selected_language, value='en-US',
                           font=("Helvetica", 18, "bold"), fg="black", bg="#98AFC7",
                           selectcolor="#98AFC7", activebackground="#98AFC7", activeforeground="white")
eng_radio.pack(anchor='w', pady=5)

ara_radio = tk.Radiobutton(lang_frame, text="Arabic", variable=selected_language, value='ar-EG',
                           font=("Helvetica", 18, "bold"), fg="white", bg="#98AFC7",
                           selectcolor="#98AFC7", activebackground="#98AFC7", activeforeground="white")
ara_radio.pack(anchor='w', pady=5)

speaker_button_frame = tk.Frame(root, bg="#98AFC7")
speaker_button_frame.pack(side="bottom", pady=10)

exit_button_speaker = tk.Button(speaker_button_frame, text="Exit", command=root.destroy,
                                font=("Helvetica", 18, "bold"), fg="white", bg="#DC143C",
                                relief=tk.RAISED, bd=5, padx=20, pady=5)
exit_button_speaker.pack(side="right", padx=10)

# Create Text Display Window
text_window = tk.Toplevel(root)
text_window.title("Text Display Window")
text_window.geometry("800x500")
text_window.configure(bg="#98AFC7")

text_top_frame = tk.Frame(text_window, bg="#98AFC7")
text_top_frame.pack(fill='x', pady=10)

if left_logo_image:
    text_left_logo = tk.Label(text_top_frame, image=left_logo_image, bg="#98AFC7")
    text_left_logo.image = left_logo_image
    text_left_logo.pack(side="left", padx=10)
else:
    text_left_logo = tk.Label(text_top_frame, text="Left Logo", font=("Helvetica", 18, "bold"), fg="white", bg="#98AFC7")
    text_left_logo.pack(side="left", padx=10)

if right_logo_image:
    text_right_logo = tk.Label(text_top_frame, image=right_logo_image, bg="#98AFC7")
    text_right_logo.image = right_logo_image
    text_right_logo.pack(side="right", padx=10)
else:
    text_right_logo = tk.Label(text_top_frame, text="Right Logo", font=("Helvetica", 18, "bold"), fg="white", bg="#98AFC7")
    text_right_logo.pack(side="right", padx=10)

button_frame = tk.Frame(text_window, bg="#98AFC7")
button_frame.pack(side="bottom", fill='x', pady=10)

def clear_text():
    text_widget.delete("1.0", tk.END)

def exit_app():
    root.destroy()

clear_button = tk.Button(button_frame, text="Clear", command=clear_text,
                         font=("Helvetica", 18, "bold"), fg="white", bg="#32CD32",
                         relief=tk.RAISED, bd=5, padx=20, pady=5)
clear_button.pack(side="left", padx=10, pady=5)

exit_button = tk.Button(button_frame, text="Exit", command=exit_app,
                        font=("Helvetica", 18, "bold"), fg="white", bg="#DC143C",
                        relief=tk.RAISED, bd=5, padx=20, pady=5)
exit_button.pack(side="left", padx=10, pady=5)

text_widget = tk.Text(text_window, wrap='word', font=("Helvetica", 18, "bold"), fg="white", bg="#98AFC7")
text_widget.pack(expand=True, fill='both', padx=10, pady=(20, 50))

def safe_insert_text(text):
    lines = float(text_widget.index('end-1c').split('.')[0])
    if lines > MAX_LINES:
        clear_text()
    text_widget.insert(tk.END, text)
    text_widget.see(tk.END)

def recognize_audio():
    recognizer = sr.Recognizer()
    microphone = sr.Microphone()
    with microphone as source:
        recognizer.adjust_for_ambient_noise(source)
    while True:
        try:
            with microphone as source:
                audio_data = recognizer.listen(source)
            language_code = selected_language.get()
            result = recognizer.recognize_google(audio_data, language=language_code)
            text_window.after(0, lambda: safe_insert_text(result + "\n"))
        except sr.UnknownValueError:
            text_window.after(0, lambda: safe_insert_text("> \n"))
        except sr.RequestError as e:
            text_window.after(0, lambda: safe_insert_text(f"API error: {e}\n"))

recognition_thread = Thread(target=recognize_audio, daemon=True)
recognition_thread.start()

root.mainloop()

